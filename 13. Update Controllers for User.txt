	  :::: Update Controllers for User ::::

Video No. : 17
Video Title : Writting update controllers for user

-----------------------------------------------------------------
models => subscription_model.js

import mongoose, {Schema} from "mongoose"

const subscriptionSchema = new Schema({
	subscriber:{
		type : Schema.Types.ObjectId //one who is subscribing
		ref : "User"
	},
	channel : {
		type : Schema.Types.ObjectId, //one whom "subscriber" is subscribing
	ref : "User"
	}
},{timestamps : true})

export const Subscription = mongoose.model("Subscription",subscriptionSchema)

-----------------------------------------------------------------
controllers => user_controller.js :

const changeCurrentPassword = asyncHandler(async(req,res)=>{

	const {oldPassword,newPassword} = req.body
	
	const user = User.findById(req?.user._id)

	const isPasswordCorrect = await user.isPasswordCorrect(oldPassword)

	if(!isPasswordCorrect){
		throw new ApiError(400,"Invalid old password")
	}

	user.password = newPassword
	
	await user.save({validateBeforeSave : false})
	
	return res.status(200).json(
		new ApiResponse(200,{},"Password Changed Successfully")
	)
})




const getCurrentUser = asyncHandler(async(req,res)=>{
	return req.status(200).json( new ApiResponse(200,req.user,"Current USer fetched Successfully"))

})




const updateAccountDetails = asyncHandler(async(req,res)=>{
	
	const {fullname,email} = req.body

	if(!fullname || !email){
		throw new ApiError(400,"All feild are required")
	}

	const user = User.findByIdAndUpdate(req.user?._id,{
		$set: {
			fullname,
			email
		}
	},
	{ new : true }
	).select("-password - =refreshToken")
	
	return res.status(200).json( new ApiResponse(200,user,"Acount details upddated successfully"))
	
})



const updateUserAvatar = asyncHandler(async(req,res)=>{
	
	const avatarLocalPath = req.file?.path

	if(!avatarLocalPath){
		throw new ApiError(400,"Avatar File is missing")
	}

	const avatar = await uploadOnCloudinary(avatarLocalPath)

	if(!avatar){
		throw new ApiError(400,"Error while uploading avatar")
	}

	const user = await User.findByIdAndUpdate(req.user?._id,{
		$set:{
			avatar : avatar.url
		}
	},{new : true}).select("-password -refreshToken")


	return res.status(200).json(new ApiResponse(200,user,"Avatar updated successfully"))
	 
})


const updateUserCoverImage = asyncHandler(async(req,res)=>{
	
	const coverImageLocalPath = req.file?.path

	if(!coverImageLocalPath){
		throw new ApiError(400,"CoverImage File is missing")
	}

	const coverImage = await uploadOnCloudinary(coverImageLocalPath)

	if(!coverImage){
		throw new ApiError(400,"Error while uploading cover image")
	}

	const user = await User.findByIdAndUpdate(req.user?._id,{
		$set:{
			coverImage : coverImage.url
		}
	},{new : true}).select("-password -refreshToken")


	return res.status(200).json(new ApiResponse(200,user,"Cover Image updated successfully"))
	 
})

